// <auto-generated />
using System;
using DMCIT.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DMCIT.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20191104091336_add closetime and opentime column")]
    partial class addclosetimeandopentimecolumn
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DMCIT.Core.Entities.Accounting.Diary131", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("Source");

                    b.Property<string>("DistributorCode");

                    b.Property<string>("CreatedById");

                    b.Property<string>("CreditAccount");

                    b.Property<string>("CustomerCode");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<string>("DebitAccount");

                    b.Property<string>("DetailCredit1");

                    b.Property<string>("DetailCredit2");

                    b.Property<string>("DetailCredit3");

                    b.Property<string>("DetailDebit1");

                    b.Property<string>("DetailDebit2");

                    b.Property<string>("DetailDebit3");

                    b.Property<bool>("Locked");

                    b.Property<decimal>("MoneyAmount");

                    b.Property<DateTime>("ReceiptDate");

                    b.Property<string>("ReceiptNo");

                    b.Property<string>("RemovedById");

                    b.Property<bool>("sentMessage");

                    b.HasKey("Id", "Source", "DistributorCode");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ReceiptDate");

                    b.HasIndex("RemovedById");

                    b.ToTable("Diary131s");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.AccountingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("AccountingEndTime");

                    b.Property<DateTime?>("AccountingStartTime");

                    b.Property<DateTime?>("CloseTime");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("OpenTime");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("AccountingPeriods");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.AppRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Description");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int?>("BusinessId");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("PersonId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("BusinessId")
                        .IsUnique()
                        .HasFilter("[BusinessId] IS NOT NULL");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId")
                        .IsUnique()
                        .HasFilter("[PersonId] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.Business", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("BusinessIdentityNumber");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<string>("Email");

                    b.Property<string>("FullName");

                    b.Property<string>("MobilePhone");

                    b.Property<int?>("OriginId");

                    b.Property<string>("Phone");

                    b.Property<string>("RemovedById");

                    b.Property<string>("ShortName");

                    b.Property<string>("TaxNumber");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("Businesses");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<string>("Name");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RemovedById");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.DistributedServer", b =>
                {
                    b.Property<string>("DistributorCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConnectionString");

                    b.Property<string>("Description");

                    b.Property<string>("Servername");

                    b.HasKey("DistributorCode");

                    b.ToTable("DistributedServers");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<DateTime?>("Birthday");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("FullName");

                    b.Property<int>("Gender");

                    b.Property<string>("IdentityNumber");

                    b.Property<string>("LastName");

                    b.Property<int?>("OriginId");

                    b.Property<string>("Phone");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("People");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.DataSynchronize.Diary131SynchronizeJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<string>("DistributorCode");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("JobId");

                    b.Property<string>("Name");

                    b.Property<string>("RemovedById");

                    b.Property<string>("Response");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RemovedById");

                    b.ToTable("Diary131SynchronizeJobs");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.DataSynchronize.SendingMessageJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<string>("DistributorCode");

                    b.Property<DateTime?>("EndTime");

                    b.Property<string>("JobId");

                    b.Property<int?>("MessageBatchId");

                    b.Property<string>("Name");

                    b.Property<string>("RemovedById");

                    b.Property<string>("Response");

                    b.Property<DateTime>("StartTime");

                    b.Property<string>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MessageBatchId");

                    b.HasIndex("RemovedById");

                    b.ToTable("SendingMessageJobs");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.HR.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<string>("FullName");

                    b.Property<string>("Location");

                    b.Property<string>("Location2");

                    b.Property<string>("Location3");

                    b.Property<int?>("ManagerId");

                    b.Property<int?>("OriginId");

                    b.Property<int?>("ParentId");

                    b.Property<string>("Phone");

                    b.Property<string>("Phone2");

                    b.Property<string>("Phone3");

                    b.Property<string>("RemovedById");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RemovedById");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.HR.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("DiscriptionNote");

                    b.Property<int?>("EmployeeTitleId");

                    b.Property<int?>("OriginId");

                    b.Property<int>("PersonId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EmployeeTitleId");

                    b.HasIndex("OriginId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RemovedById");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.HR.EmployeeTitle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<string>("Name");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("RemovedById");

                    b.ToTable("EmployeeTitles");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.AutoMessageConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<int?>("OriginId");

                    b.Property<string>("Period");

                    b.Property<string>("RemovedById");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("AutoMessageConfigs");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.AutoMessageConfigMessageReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutoMessageConfigId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<int>("MessageReceiverId");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("AutoMessageConfigId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("MessageReceiverId");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("AutoMesasgeConfigMessageReceivers");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.AutoMessageConfigMessageReceiverGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutoMessageConfigId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<int>("MessageReceiverGroupId");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("AutoMessageConfigId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("MessageReceiverGroupId");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("AutoMessageConfigMessageReceiverGroups");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.AutoMessageConfigProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AutoMessageConfigId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<int>("MessageServiceProviderId");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("AutoMessageConfigId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("MessageServiceProviderId");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("AutoMessageConfigProviders");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageBatch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ActionTime");

                    b.Property<int?>("AutoMessageConfigId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("FinishTime");

                    b.Property<int?>("MessageSourceId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("AutoMessageConfigId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MessageSourceId");

                    b.HasIndex("RemovedById");

                    b.ToTable("MessageBatches");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("FullName");

                    b.Property<int?>("OriginId");

                    b.Property<int?>("ReceiverCategoryId");

                    b.Property<string>("RemovedById");

                    b.Property<string>("ShortName");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("OriginId");

                    b.HasIndex("ReceiverCategoryId");

                    b.HasIndex("RemovedById");

                    b.ToTable("MessageReceivers");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageReceiverGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<bool>("IsPrivate");

                    b.Property<string>("Name");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("MessageReceiverGroups");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageReceiverGroupMessageReceiver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<int>("MessageReceiverGroupId");

                    b.Property<int>("MessageReceiverId");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("MessageReceiverGroupId");

                    b.HasIndex("MessageReceiverId");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("MessageReceiverGroupMessageReceivers");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageServiceProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLabel");

                    b.Property<string>("AddressRegex");

                    b.Property<string>("Code");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<string>("Module");

                    b.Property<string>("Name");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("MessageServiceProviders");

                    b.HasData(
                        new { Id = 1, AddressLabel = "Viettel SMS Brandname", AddressRegex = "(84)+([0-9]{9})\\b", Code = "viettel", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 138, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 138, DateTimeKind.Local), Module = "DMCIT.Infrastructure.Providers.Test", Name = "Dịch vụ nhắn tin thương hiệu của Viettel" },
                        new { Id = 2, AddressLabel = "Netco SMS", AddressRegex = "(09|01[2|6|8|9])+([0-9]{8})\\b", Code = "netco", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 138, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 138, DateTimeKind.Local), Module = "DMCIT.Infrastructure.Providers.Test", Name = "Dịch vụ nhắn tin giá rẻ Netco" },
                        new { Id = 3, AddressLabel = "Zalo", AddressRegex = "(.*?)", Code = "zalo", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 138, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 138, DateTimeKind.Local), Module = "DMCIT.Infrastructure.Providers.Test", Name = "Dịch vụ nhắn tin qua Zalo" }
                    );
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageSource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("Discription");

                    b.Property<string>("DiscriptionNote");

                    b.Property<string>("Name");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("MessageSources");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.ReceiverCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<string>("Name");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("ReceiverCategories");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.ReceiverProvider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<int>("MessageReceiverId");

                    b.Property<int>("MessageServiceProviderId");

                    b.Property<int?>("OriginId");

                    b.Property<string>("ReceiverAddress");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("MessageReceiverId");

                    b.HasIndex("MessageServiceProviderId");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("ReceiverProviders");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.SentMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<int>("MessageBatchId");

                    b.Property<int>("ReceiverProviderId");

                    b.Property<string>("RemovedById");

                    b.Property<string>("ResponseMessage");

                    b.Property<DateTime?>("ResponseTime");

                    b.Property<DateTime?>("SentTime");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MessageBatchId");

                    b.HasIndex("ReceiverProviderId");

                    b.HasIndex("RemovedById");

                    b.ToTable("SentMessages");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Reports.CustomerLiability", b =>
                {
                    b.Property<int?>("CustomerId");

                    b.Property<string>("DistributorCode");

                    b.Property<decimal>("Amount");

                    b.Property<string>("Code");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DispatchAccountingPeriodId");

                    b.HasKey("CustomerId", "DistributorCode");

                    b.HasIndex("DispatchAccountingPeriodId");

                    b.ToTable("CustomerLiabilities");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Reports.CustomerPayment", b =>
                {
                    b.Property<string>("CustomerCode");

                    b.Property<string>("DistributorCode");

                    b.Property<DateTime>("ReceiptDate");

                    b.Property<decimal>("Amount");

                    b.Property<int?>("CustomerId");

                    b.Property<DateTime?>("DateCreated");

                    b.Property<int?>("DistributorId");

                    b.Property<decimal?>("Liability");

                    b.Property<int?>("SentMessageId");

                    b.HasKey("CustomerCode", "DistributorCode", "ReceiptDate");

                    b.HasIndex("CustomerId");

                    b.HasIndex("DistributorId");

                    b.HasIndex("SentMessageId");

                    b.ToTable("CustomerPayments");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Sales.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BusinessId");

                    b.Property<string>("Code");

                    b.Property<float?>("CoordinateX");

                    b.Property<float?>("CoordinateY");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<int?>("DistributorId");

                    b.Property<int?>("OriginId");

                    b.Property<int?>("PersonId");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("BusinessId");

                    b.HasIndex("Code");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("DistributorId");

                    b.HasIndex("OriginId");

                    b.HasIndex("PersonId");

                    b.HasIndex("RemovedById");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Sales.Distributor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Code");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("DiscriptionNote");

                    b.Property<string>("Name");

                    b.Property<int?>("OriginId");

                    b.Property<string>("Phone");

                    b.Property<string>("RemovedById");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("Distributors");

                    b.HasData(
                        new { Id = 1, Code = "DT", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Đồng Tháp" },
                        new { Id = 2, Code = "CT", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Cần Thơ" },
                        new { Id = 3, Code = "AG", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh An Giang" },
                        new { Id = 4, Code = "TP", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Hồ Chí Minh" },
                        new { Id = 5, Code = "MD", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Miền Đông" },
                        new { Id = 6, Code = "TN", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Tây Nguyên" },
                        new { Id = 7, Code = "DN", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Đà Nẵng" },
                        new { Id = 8, Code = "VI", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Vinh" },
                        new { Id = 9, Code = "TH", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Thái Nguyên" },
                        new { Id = 10, Code = "HN", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Hà Nội" },
                        new { Id = 11, Code = "HD", DateCreated = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), DateEffective = new DateTime(2019, 11, 4, 16, 13, 36, 135, DateTimeKind.Local), Name = "Chi nhánh Hải Dương" }
                    );
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("DateCreated");

                    b.Property<DateTime>("DateEffective");

                    b.Property<DateTime?>("DateEnd");

                    b.Property<DateTime?>("DateRemoved");

                    b.Property<DateTime?>("DateReplaced");

                    b.Property<string>("Description");

                    b.Property<string>("DiscriptionNote");

                    b.Property<string>("Module");

                    b.Property<string>("Name");

                    b.Property<int?>("OriginId");

                    b.Property<string>("RemovedById");

                    b.Property<string>("Summary");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DateEffective");

                    b.HasIndex("DateEnd");

                    b.HasIndex("OriginId");

                    b.HasIndex("RemovedById");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Accounting.Diary131", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.AccountingPeriod", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Core.AccountingPeriod", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.AppUser", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.Business", "Business")
                        .WithOne("AppUser")
                        .HasForeignKey("DMCIT.Core.Entities.Core.AppUser", "BusinessId");

                    b.HasOne("DMCIT.Core.Entities.Core.Person", "Person")
                        .WithOne("AppUser")
                        .HasForeignKey("DMCIT.Core.Entities.Core.AppUser", "PersonId");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.Business", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Core.Business", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.Country", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Core.Person", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Core.Person", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.DataSynchronize.Diary131SynchronizeJob", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.DataSynchronize.SendingMessageJob", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageBatch", "MessageBatch")
                        .WithMany()
                        .HasForeignKey("MessageBatchId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.HR.Department", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.HR.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerId");

                    b.HasOne("DMCIT.Core.Entities.HR.Department", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.HR.Department", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.HR.Employee", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.HR.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId");

                    b.HasOne("DMCIT.Core.Entities.HR.EmployeeTitle", "EmployeeTitle")
                        .WithMany()
                        .HasForeignKey("EmployeeTitleId");

                    b.HasOne("DMCIT.Core.Entities.HR.Employee", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.HR.EmployeeTitle", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.AutoMessageConfig", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.AutoMessageConfig", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.AutoMessageConfigMessageReceiver", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Messaging.AutoMessageConfig", "AutoMessageConfig")
                        .WithMany("AutoMessageConfigMessageReceivers")
                        .HasForeignKey("AutoMessageConfigId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageReceiver", "MessageReceiver")
                        .WithMany()
                        .HasForeignKey("MessageReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Messaging.AutoMessageConfigMessageReceiver", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.AutoMessageConfigMessageReceiverGroup", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Messaging.AutoMessageConfig", "AutoMessageConfig")
                        .WithMany("AutoMessageConfigMessageReceiverGroups")
                        .HasForeignKey("AutoMessageConfigId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageReceiverGroup", "MessageReceiverGroup")
                        .WithMany()
                        .HasForeignKey("MessageReceiverGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Messaging.AutoMessageConfigMessageReceiverGroup", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.AutoMessageConfigProvider", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Messaging.AutoMessageConfig", "AutoMessageConfig")
                        .WithMany("AutoMessageConfigProviders")
                        .HasForeignKey("AutoMessageConfigId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageServiceProvider", "MessageServiceProvider")
                        .WithMany()
                        .HasForeignKey("MessageServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Messaging.AutoMessageConfigProvider", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageBatch", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Messaging.AutoMessageConfig", "AutoMessageConfig")
                        .WithMany()
                        .HasForeignKey("AutoMessageConfigId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageSource", "MessageSource")
                        .WithMany()
                        .HasForeignKey("MessageSourceId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageReceiver", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Sales.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("DMCIT.Core.Entities.HR.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageReceiver", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Messaging.ReceiverCategory", "ReceiverCategory")
                        .WithMany("MessageReceivers")
                        .HasForeignKey("ReceiverCategoryId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageReceiverGroup", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageReceiverGroup", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageReceiverGroupMessageReceiver", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageReceiverGroup", "MessageReceiverGroup")
                        .WithMany("MessageReceiverGroupMessageReceivers")
                        .HasForeignKey("MessageReceiverGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageReceiver", "MessageReceiver")
                        .WithMany("MessageReceiverGroupMessageReceivers")
                        .HasForeignKey("MessageReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageReceiverGroupMessageReceiver", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageServiceProvider", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageServiceProvider", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.MessageSource", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageSource", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.ReceiverCategory", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.ReceiverCategory", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.ReceiverProvider", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageReceiver", "MessageReceiver")
                        .WithMany("ReceiverProviders")
                        .HasForeignKey("MessageReceiverId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageServiceProvider", "MessageServiceProvider")
                        .WithMany("ReceiverProviders")
                        .HasForeignKey("MessageServiceProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Messaging.ReceiverProvider", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Messaging.SentMessage", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Messaging.MessageBatch", "MessageBatch")
                        .WithMany("SentMessages")
                        .HasForeignKey("MessageBatchId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Messaging.ReceiverProvider", "ReceiverProvider")
                        .WithMany()
                        .HasForeignKey("ReceiverProviderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Reports.CustomerLiability", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Sales.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Core.AccountingPeriod", "DispatchAccountingPeriod")
                        .WithMany()
                        .HasForeignKey("DispatchAccountingPeriodId");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Reports.CustomerPayment", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Sales.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId");

                    b.HasOne("DMCIT.Core.Entities.Sales.Distributor", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId");

                    b.HasOne("DMCIT.Core.Entities.Messaging.SentMessage", "SentMessage")
                        .WithMany()
                        .HasForeignKey("SentMessageId");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Sales.Customer", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.Business", "Business")
                        .WithMany()
                        .HasForeignKey("BusinessId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Sales.Distributor", "Distributor")
                        .WithMany()
                        .HasForeignKey("DistributorId");

                    b.HasOne("DMCIT.Core.Entities.Sales.Customer", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Sales.Distributor", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Sales.Distributor", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("DMCIT.Core.Entities.Setting", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("DMCIT.Core.Entities.Setting", "Origin")
                        .WithMany("Versions")
                        .HasForeignKey("OriginId");

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser", "RemovedBy")
                        .WithMany()
                        .HasForeignKey("RemovedById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("DMCIT.Core.Entities.Core.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("DMCIT.Core.Entities.Core.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
